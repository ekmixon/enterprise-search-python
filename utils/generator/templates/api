    def {{ api.func_name }}(
        self,
        {% for param in api.required_params %}
        {{ param.param_name }},
        {% endfor %}{% for param in api.optional_params %}
        {{ param.param_name }}=None,
        {% endfor %}
        params=None,
        headers=None,
        http_auth=DEFAULT,
        request_timeout=DEFAULT,
        ignore_status=(),
    ):
        """{% if api.description %}
        {{ api.description|replace("\n", " ")|wordwrap(wrapstring="\n        ") }}{% endif %}{% if api.docs_url %}

        `<{{ api.docs_url }}>`_
{% endif %}{% if api.all_params|list|length %}{% for param in api.all_params %}
        {% filter wordwrap(72, wrapstring="\n            ") %}:arg {{ param.param_name }}: {{ param.description }}{% endfilter %}{% endfor %}{% endif %}
        :arg params: Additional query params to send with the request
        :arg headers: Additional headers to send with the request
        :arg http_auth: Access token or HTTP basic auth username
            and password to send with the request
        :arg request_timeout: Timeout in seconds
        :arg ignore_status: HTTP status codes to not raise an error{% if api.raises %}{% for error in api.raises %}
        :raises {{ error }}:{%endfor %}{% endif %}
        """{% if api.required_params|list|length %}{% if api.required_params|list|length == 1 %}
        if {{ api.required_params[0].param_name }} in SKIP_IN_PATH:
            raise ValueError("Empty value passed for a required argument"){% else %}
        for param in ({% for param in api.required_params %}
        {{ param.param_name }},
        {% endfor %}):
            if param in SKIP_IN_PATH:
                raise ValueError("Empty value passed for a required argument")
        {% endif %}{% endif %}

        params = QueryParams(params){% for param in api.query_params %}
        if {{ param.param_name}} is not None:{% if param.type == "array" and param.explode %}
            for val in to_array({{ param.param_name }}, param="{{ param.param_name }}"):
                params.add("{{ param.wire_name }}", val){% else %}
            params.add("{{ param.wire_name }}", {{ param.param_name}}){% endif %}{% endfor %}

        {% if api.has_body %}
        {% if api.body_params|list|length >= 2 %}
        body = body or {% raw %}{}{% endraw %}{% for param in api.required_params %}{% if param.in_ == "body" %}
        body["{{ param.wire_name }}"] = {{ param.param_name }}{% endif %}{% endfor %}{% endif %}
        {% endif %}

        return self.perform_request(
            "{{ api.method }}",
            {% if api.has_path_params %}to_path({% for part in api.path_parts %}
                {% if part.startswith("{") %}
                {{ part[1:-1] }},
                {% else %}
                "{{ part }}",
                {% endif %}
            {% endfor %}){% else %}"{% for part in api.path_parts %}/{{ part }}{% endfor %}"{% endif %},
            {% if api.has_body %}
            body={% if api.body_params|list|length >= 2 %}body{% else %}{{ api.named_body_param.param_name }}{% endif %},
            {% endif %}
            params=params,
            headers=headers,
            http_auth=http_auth,
            request_timeout=request_timeout,
            ignore_status=ignore_status,
        )
